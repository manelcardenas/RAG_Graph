Metadata-Version: 2.2
Name: rag_graph
Version: 0.1.0
Summary: RAG project using Neo4j and LLM
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: neo4j>=5.28.1
Requires-Dist: langchain-community>=0.3.17
Requires-Dist: langchain-text-splitters>=0.3.6
Requires-Dist: langchain-ollama>=0.2.3
Requires-Dist: langchain-experimental>=0.3.4
Requires-Dist: langchain-openai>=0.3.6
Provides-Extra: dev
Requires-Dist: ruff>=0.6.9; extra == "dev"
Requires-Dist: pytest>=8.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.5.0; extra == "dev"

# Rag Graph Project

## Overview

This project is a knowledge graph that uses LLMs to create a graph of entities and their relationships.

## Features

- Extraction of entities and relationships from text using LLMs
- Storage of knowledge in Neo4j graph database
- Query capabilities through Neo4j's Cypher query language

## Development Setup

### Prerequisites

- Python 3.11 or higher
- Neo4j database (local or cloud)
- OpenAI API key (or other supported LLM API)

### Using `uv` (Recommended)

1. Install dependencies:

   ```bash
   uv pip install .
   ```

2. Install development dependencies:

   ```bash
   uv pip install ".[dev]"
   ```

3. Set up pre-commits hooks:

```bash
pre-commit install
```

### Using `pip`

1. Install dependencies:

   ```bash
   pip install .
   ```

2. Install development dependencies:

   ```bash
   pip install ".[dev]"
   ```

3. Lint and format code:
   ```bash
   ruff check . && ruff format .
   ```

## Setup

1. Clone the repository
2. Install the dependencies
3. Run the script

```bash
python knowledge_graph.py
```

## Usage

Run in p:
neo4j browser

```bash
MATCH (n)-[r]->(m)
RETURN n, r, m
```

## Configuration
